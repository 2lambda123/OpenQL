# File:         test_looping.cq
# Purpose:      test cQasm looping with CC backend
# Notes:

version 1.2
qubits 17

pragma @ql.name("test_looping")
pragma @ql.platform("config_cc_s17_direct_iq_cqasm1.2.json")

.def
map qInput1 = q[0]
map qInput2 = q[1]
map qAncilla3 = q[2]
map qOutput4 = q[3]

var mAncilla3: bool

map i = creg(0)
map j = creg(1)

.init
set i = 0;

.forLoop1
for (i=0; i<10000; i=i+1) {
    if (!mAncilla3) {
        break
    }
}


.forLoop2
for (; i<10000; )  {
}

.forLoop3
for (; true; )  {  # NB: condition cannot be empty, defined as: utils::One<ir::Expression>
}

.forLoopTwice  # must generate unique labels
for (; true; )  {
}
for (; true; )  {
}

.forLoopNested
for (; true; )  {
    for (; true; )  {
    }
}

.forLoopBreak
for (; true; )  {
    break;
}

.forLoopBreak2
for (; true; )  {
    if(i==1) {
        break;
    }
}

.forLoopBreak3
for (; true; )  {
    if(i==1) {
        if(j==1) {
            break;
        }
    }
}

.forLoopContinue
for (; true; )  {
    continue;
}

.foreachLoop
foreach(i = 0..10) {
}


.whileLoop
while (i<10000) {
}


.repeatUntilLoop
repeat {
} until (i==0);


.ifStatement
if(i==0) {
}

.ifElseStatement
if(i==0) {
} else {
}

.ifElifElseStatement
if(i==0) {
} else if(i==1)  {
} else {
}



# FIXME: move to its own file
.condGate
cond (false) x q[0]

