{
	// author: 	Wouter Vlothuizen
	// notes: 	based on '../test_cfg_none_s7.json'

	"file_type": "OpenQL-config",
	"file_version": "1.1",
	"min_version_openql": "0.5.3",

	"eqasm_compiler" : "eqasm_backend_cc",

	"hardware_settings": {
		"qubit_number": 7,
		"cycle_time" : 20,
		// "mw_mw_buffer": 0,
		// "mw_flux_buffer": 0,
		// "mw_readout_buffer": 0,
		// "flux_mw_buffer": 0,
		// "flux_flux_buffer": 0,
		// "flux_readout_buffer": 0,
		// "readout_mw_buffer": 0,
		// "readout_flux_buffer": 0,
		// "readout_readout_buffer": 0,

		// FIXME: we put this key inside "hardware_settings" for now, but it should be below "backend" or so
		"eqasm_backend_cc": {
			// Immutable properties of instruments.
			// FIXME: introduce 'controller_definitions'?
			"instrument_definitions": {
//				"cc": [
//					{	"name": "qutech-cc",
//						"slots": 12
//					}
//				],
				"awg": [
//					{	"name": "qutech-qwg",
//						"channels": 4,
//						"control_group_sizes": [4]
//					},
					{	"name": "zi-hdawg",
						"channels": 8,
						"control_group_sizes": [1, 4, 8],
						"latency": 300		// FIXME: check. If latency depends on FW version, several definitions must be present
					}
				],
				"switch": [
					{	"name": "qutech-vsm",
						"channels": 32,
						"control_group_sizes": [1],
						"latency": 10		// FIXME: check
					}
				],
				"measure": [
					{	"name": "zi-uhfqc",
						"channels": 9,
						"control_group_sizes": [1],
						"latency": 150		// FIXME: check
					}
				]
			},

			// Modes to control instruments. These define which bits are used to
			// control groups of channels
			"control_modes": {
				"awg8-mw-vsm": {						// ZI_HDAWG8.py::cfg_codeword_protocol() == 'microwave'
					"control_bits": [
						[7,6,5,4,3,2,1,0],
						[15,14,13,12,11,10,9,8]
					],
					"triggers": [31]
				},
				"awg8-mw-direct-iq": {				// just I&Q to generate microwave without VSM
					"control_bits": [
						[6,5,4,3,2,1,0],				// FIXME: no official mode yet
						[13,12,11,10,9,8,7],
						[20,19,18,17,16,15,14],
						[27,26,25,24,23,22,21]
					],
					"triggers": [31]
				},
				"awg8-flux": {							// ZI_HDAWG8.py::cfg_codeword_protocol() == 'flux'
					"control_bits": [
						[2,1,0],
						[5,4,3],
						[8,7,6],
						[11,10,9],
						[14,13,12],
						[17,16,15],
						[20,19,18],
						[23,22,21]
					],
					"triggers": [31]
				},
				"awg8-flux-vector": {				// single code word for 8 flux channels
					"control_bits": [
						[7,6,5,4,3,2,1,0]
					],
					"triggers": [31]
				},
				"uhfqc-9ch": {
					"control_bits": [[25],[24],[23],[22],[21],[20],[19],[18],[17]],
					"triggers": [16],
					"result_bits": [[9],[8],[7],[6],[5],[4],[3],[2],[1]],
					"data_valids": [0]
				},
				"vsm-32ch":{
					"control_bits": [
						[0],[1],[2],[3],[4],[5],[6],[7],
						[8],[9],[10],[11],[12],[13],[14],[15],
						[16],[17],[18],[19],[20],[21],[22],[23],
						[24],[25],[26],[27],[28],[28],[30],[31]
					],
					"triggers": []						// no trigger
				}
			},

			// Instruments used in this setup, their configuration and connectivity.
			"cc_setup": {
				"name": "cc",
				"type": "qutech-cc",
				"slots": [
					{	"slot": 0,
						"io_module": "cc-conn-dio-diff",
						"instrument": {
							"name": "awg8-mw-0",
							"type": "zi-hdawg",
							"control_mode": "awg8-mw-vsm",
							"signal_type": "mw",
							"qubits": [[0, 1, 2, 3], [4, 5, 6, 7]]
						}
					},
					{	"slot": 5,
						"io_module": "cc-conn-dio-diff",
						"instrument": {
							"name": "awg8-flux-0",
							"type": "zi-hdawg",
							"control_mode": "awg8-flux",
							"signal_type": "flux",
							"qubits": [[0], [1], [2], [3], [4], [5], [6], [], [7]]
						}
					},
					{	"slot": 7,
						"io_module": "cc-conn-dio",
						"instrument": {
							"name": "uhfqc-0",
							"type": "zi-uhfqc",
							"control_mode": "uhfqc-9ch",
							"signal_type": "measure",
							"qubits": [[0], [1], [2], [3], [4], [5], [6], [7], []]
						}
					},
					{	"slot": 11,
						"io_module": "cc-conn-vsm",
						"instrument": {
							"name": "vsm-0",
							"type": "qutech-vsm",
							"control_mode": "vsm-32ch",
							"signal_type": "switch",
							"qubits": [[0], [1], [2], [3], [4], [5], [6], [7], [8]]
						}
					}
				]
			},

			"signals": {
				"single-qubit": [
					{	"type": "mw",
						"operand_idx": 0,
						"value": [
							"{gateName}-gauss-{instrumentName}-i",
							"{gateName}-gauss-{instrumentName}-q",
							"{gateName}-derGauss-{instrumentName}-i",
							"{gateName}-derGauss-{instrumentName}-q"	// FIXME: {instrumentName} should evaluate to proper channel group
						]
					},
					{	"type": "switch",
						"operand_idx": 0,
						"value": ["{q}"]
					}
				]
			}
		}
	},

	"resources": {
		"qubits": {
			"count": 7
		},
		"qwgs" : {
			"count": 3,
			"connection_map": {
				"0" : [0, 1],
				"1" : [2, 3, 4],
				"2" : [5, 6]
			}
		},
		"meas_units" : {
			"count": 2,
			"connection_map":
			{
				"0" : [0, 2, 3, 5, 6],
				"1" : [1, 4]
			}
		},
		"edges": {
			"count": 16,
			"connection_map": {
				"0": [2, 10],
				"1": [3, 11],
				"2": [0, 8],
				"3": [1, 9],
				"4": [6, 14],
				"5": [7, 15],
				"6": [4, 12],
				"7": [5, 13],
				"8": [2, 10],
				"9": [3, 11],
				"10": [0, 8],
				"11": [1, 9],
				"12": [6, 14],
				"13": [7, 15],
				"14": [4, 12],
				"15": [5, 13]
			}
		}
	},

	"topology": {
		"x_size": 5,
		"y_size": 3,
		"qubits": [
			{ "id": 0,  "x": 1, "y": 2 },
			{ "id": 1,  "x": 3, "y": 2 },
			{ "id": 2,  "x": 0, "y": 1 },
			{ "id": 3,  "x": 2, "y": 1 },
			{ "id": 4,  "x": 4, "y": 1 },
			{ "id": 5,  "x": 1, "y": 0 },
			{ "id": 6,  "x": 3, "y": 0 }
		],
		"edges": [
			{ "id": 0,  "src": 2, "dst": 0 },
			{ "id": 1,  "src": 0, "dst": 3 },
			{ "id": 2,  "src": 3, "dst": 1 },
			{ "id": 3,  "src": 1, "dst": 4 },
			{ "id": 4,  "src": 2, "dst": 5 },
			{ "id": 5,  "src": 5, "dst": 3 },
			{ "id": 6,  "src": 3, "dst": 6 },
			{ "id": 7,  "src": 6, "dst": 4 },
			{ "id": 8,  "src": 0, "dst": 2 },
			{ "id": 9,  "src": 3, "dst": 0 },
			{ "id": 10,  "src": 1, "dst": 3 },
			{ "id": 11,  "src": 4, "dst": 1 },
			{ "id": 12,  "src": 5, "dst": 2 },
			{ "id": 13,  "src": 3, "dst": 5 },
			{ "id": 14,  "src": 6, "dst": 3 },
			{ "id": 15,  "src": 4, "dst": 6 }
		]
	},

	// FIXME: allow AWG8 setPrecompClear with wave
	// FIXME: remove instructions we don't/cannot use
	"instructions": {
		// additions from 'CC-software-implementation.docx':
		"park_cz" : { // park signal with same length as cz gate
			"duration" : 40,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],	// FIXME: required
			"cc": {
				"sig": {
					"flux": {
						"qubit": "q%0",	// FIXME: necessary, or implicit from parameters we get at runtime. Let's look at cz
						"wave": ["{gateName}-{instrumentName}"]
					}
//					"flux,<codeword>,%q" // %q assumes same codeword for all qubits
				}
			}
		},
		"park_measure" : { // park signal with same length as measurement
			"duration" : 300,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],	// FIXME: required
			"cc": {
				"sig": {
//					"flux,<codeword>,%q" // %q assumes same codeword for all qubits
				}
			}
		},

		// gate set from 'test_cfg_none_s7.json':
		"prepx": {
			"duration": 320,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "prepx"
		},
		"prepz": {
			"duration": 320,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "none",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "prepz"
		},
		"cprepz": {
			"duration": 320,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "cprepz",
			"cc_light_cond" : 1
		},
		"measx": {
			"duration": 300,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "readout",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "measx"
		},
		"measz": {
			"duration": 300,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "readout",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "measz"
		},
		"measure": {
			"duration": 300,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "readout",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "measz"
		},
		"i": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "i"
		},
		"x": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "x",
			"cc": {
				//"signal": {"$ref": "#/hardware_settings/eqasm_backend_cc/signals/single-qubit"}
				"signal": [
					{	"type": "mw",
						"operand_idx": 0,
						"value": [
							"{gateName}-gauss-{instrumentName}-i",
							"{gateName}-gauss-{instrumentName}-q",
							"{gateName}-derGauss-{instrumentName}-i",
							"{gateName}-derGauss-{instrumentName}-q"	// FIXME: {instrumentName} should evaluate to proper channel group
						]
					},
					{	"type": "switch",
						"operand_idx": 0,
						"value": ["{q}"]
					}
//					"flux": [],
//					"measure": [],	// specify output and weight?
				]
			}
		},
		"y": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "y"
		},
		"z": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "z"
		},
		"h": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "h"
		},
		"s": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "s"
		},
		"sdag": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "sdag"
		},
		"rx90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "x90"
		},
		"xm90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "xm90"
		},
		"ry90 q0": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "y90"
		},
		"ym90": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "ym90"
		},
		"t": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "t"
		},
		"tdag": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "tdag"
		},
		"x45": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "x45"
		},
		"xm45": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "xm45"
		},
		"ry180": {
			"duration": 20,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": false,
			"type": "mw",
			"cc_light_instr_type": "single_qubit_gate",
			"cc_light_instr": "ry180"
		},
		"cnot": {
			"duration": 80,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": true,
			"type": "flux",
			"cc_light_instr_type": "two_qubit_gate",
			"cc_light_instr": "cnot",
			"cc": {
				"signal": [
					{	"type": "flux",
						"operand_idx": 0,		// control, or target?
						"value": ["flux-0-{q}"]
					},
					{	"type": "flux",
						"operand_idx": 1,		// control, or target?
						"value": ["flux-1-{q}"]
					}
				]
			}
		},

		// should handle:
		// https://github.com/QE-Lab/OpenQL/issues/166
		// https://github.com/QE-Lab/OpenQL/issues/180
		"cz": {
			"duration": 40,
			"latency": 0,
			"matrix": [ [0.0,1.0], [1.0,0.0], [1.0,0.0], [0.0,0.0] ],
			"disable_optimization": true,
			"type": "flux",
			"cc_light_instr_type": "two_qubit_gate",
			"cc_light_instr": "cz"
		}
	}	// end of "instructions"
}

