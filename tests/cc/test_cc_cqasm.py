# File:         test_rus_private.py
# Purpose:      test RUS using cQASM1.2
# Based on:     test_structure_decomposition.py

import os
import unittest
import pathlib
import inspect
#from utils import file_compare

import openql as ql


curdir = os.path.dirname(os.path.realpath(__file__))
output_dir = os.path.join(curdir, 'test_output')


class Test_cQASM(unittest.TestCase):

    def run_test_case(self, name):
        old_wd = os.getcwd()
        try:
            os.chdir(curdir)

            in_fn = 'test_' + name + '.cq'
            out_fn = 'test_output/' + name + '_out.cq'
            gold_fn = 'golden/' + name + '_out.cq'

            ql.initialize()
            ql.set_option('log_level', 'LOG_INFO')
            # ql.set_option('log_level', 'LOG_DEBUG')
            # ql.set_option('log_level', 'LOG_WARNING')

            if 0:
                # use compatibility
                # fails in new-to-old IR conversion for CC backend
                ql.set_option('write_qasm_files', 'yes')
                ql.set_option('write_report_files', 'yes')
                ql.compile(in_fn)

            if 0:
                # use compatibility
                # fails in outputting debug info
                ql.compile(
                    in_fn,
                    {
                        # 'cqasm_file': in_fn,
                        'output_prefix': 'test_output/%N.%P',
                        'debug': 'yes'
                    }
                )

            if 1:
                # use pass manager
                pl = ql.Platform("cc", "config_cc_s17_direct_iq_openql_0_10.json")
                c = pl.get_compiler()

                if 1:
                    # insert decomposer for legacy decompositions
                    # See; see https://openql.readthedocs.io/en/latest/gen/reference_passes.html#instruction-decomposer
                    c.prefix_pass(
                        'dec.Instructions',
                        'legacy',  # sets predicate key to use legacy decompositions (FIXME: TBC)
                        {
                            'output_prefix': 'test_output/%N.%P',
                            'debug': 'yes'
                        }
                    )

                # insert cQASM reader (as very first step)
                c.prefix_pass(
                    'io.cqasm.Read',
                    'reader',
                    {
                        'cqasm_file': in_fn,
                        'output_prefix': 'test_output/%N.%P',
                        'debug': 'yes'
                    }
                )



                # set scheduler options
                # sch = c.get_pass('scheduler')
                # sch.set_option('scheduler_target', 'asap')
#               c.set_option('scheduler.debug', 'yes')
#                 c.set_option('scheduler.scheduler_target', 'asap')
#                 c.set_option('scheduler.scheduler_heuristic', 'none')

                c.print_strategy()
                c.compile_with_frontend(pl)


#            self.assertTrue(file_compare(out_fn, gold_fn))

        finally:
            os.chdir(old_wd)

    def run_test_case_string(self, name: str, src: str):
        pathlib.Path(curdir+"/test_"+name+".cq").write_text(inspect.cleandoc(src))
        self.run_test_case(name)


    def test_rus_elements(self):
        self.run_test_case('rus_elements')

    def test_nested_rus_angle_0(self):
        angle = 0
        echo_delay_inner_rus = 1
        echo_delay_inner_rus_data = 1
        echo_delay_outer_rus = 1

        angle_gate = 'cw_{:02}'.format(int(angle) // 20 + 9)

        src = f"""
            # File:         test_nested_rus_angle_0.cq (generated by test_cc_cqasm.py)
            # Purpose:      test Repeat Until Success
            # Based on:     OpenQL test case test_cc.py::test_nested_rus_angle_0
            
            version 1.2
            
            pragma @ql.name("test_nested_rus_angle_0")
            pragma @ql.platform("config_cc_s17_direct_iq_openql_0_10.json")    
            
            .def
            map qAncilla1 = q[10]
            map bAncilla1 = b[10]
            map qAncilla2 = q[8]
            map bAncilla2 = b[8]
            map qData = q[11]
                        
            .init
            prepz qAncilla1
            prepz qAncilla2
            prepz qData
            {angle_gate} qData
            barrier
            
            .rus
            repeat {{
                while (True) {{
                    rx2theta qAncilla1
                    rym90 qAncilla2
                    cz qAncilla1, qAncilla2
                    rxm2theta qAncilla1
                    ry90beta qAncilla2
                    barrier qAncilla1,qAncilla2
            
                    rphi180 qData
                    measure_fb qAncilla1
                    wait qAncilla2, {echo_delay_inner_rus}
                    rphi180 qAncilla2
                    wait qAncilla2, {1860-echo_delay_inner_rus}
                    wait qData, {echo_delay_inner_rus_data}
                    barrier qAncilla1,qAncilla2,qData
                    if (!bAncilla1) {{
                        break
                    }}
            #        barrier qAncilla1,qAncilla2,qData
            
                    rx180 qAncilla1
                    rxm90 qAncilla2
                    rx180 qData
                    barrier qAncilla1,qAncilla2,qData
                }}
            
                rx180 qAncilla2
                rx180 qData
                rym90 qData
                cz qAncilla2, qData
                ry90 qData
            
                while(True) {{
                    rx2theta qAncilla1
                    rym90alpha qAncilla2
                    cz qAncilla1, qAncilla2
                    rx2thetaalpha qAncilla1
                    ry90betapi qAncilla2
                    barrier qAncilla1,qAncilla2
                    rphi180beta qData
                    measure_fb qAncilla1
                    wait qAncilla2, {echo_delay_inner_rus}
                    rphi180alpha qAncilla2
                    wait qAncilla2, {1860-echo_delay_inner_rus}
                    wait qData, {echo_delay_inner_rus_data}
                    barrier qAncilla1,qAncilla2,qData
            
                    if (!bAncilla1) {{
                        break
                    }}
            #        barrier qAncilla1,qAncilla2,qData
            
                    rx180 qAncilla1
                    rx90alpha qAncilla2
                    rx180beta qData
            #        barrier qAncilla1,qAncilla2,qData
                }}
            
                barrier qAncilla2,qData
                rx180alpha2 qAncilla2
                measure_fb qAncilla2
                wait qData, {echo_delay_outer_rus}
                rphi180beta2 qData
                wait qData, {1880-echo_delay_outer_rus}
                barrier qAncilla2,qData
            }} until (!bAncilla2)
            measure_fb qData
        """
        self.run_test_case_string('nested_rus_angle_0', src)

    def test_looping(self):
        self.run_test_case('looping')

    # def test_from_string(self):
    #     pl = ql.Platform("cc", "config_cc_s17_direct_iq_openql_0_10.json")
    #     c = pl.get_compiler()
    #     # FIXME

    @unittest.skip("private test")
    def test_rus_private(self):
        self.run_test_case('rus_private')

if __name__ == '__main__':
    unittest.main()
