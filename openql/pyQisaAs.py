# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyQisaAs', [dirname(__file__)])
        except ImportError:
            import _pyQisaAs
            return _pyQisaAs
        if fp is not None:
            try:
                _mod = imp.load_module('_pyQisaAs', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyQisaAs = swig_import_helper()
    del swig_import_helper
else:
    import _pyQisaAs
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyQisaAs.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _pyQisaAs.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _pyQisaAs.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _pyQisaAs.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _pyQisaAs.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _pyQisaAs.SwigPyIterator_equal(self, x)

    def copy(self):
        return _pyQisaAs.SwigPyIterator_copy(self)

    def next(self):
        return _pyQisaAs.SwigPyIterator_next(self)

    def __next__(self):
        return _pyQisaAs.SwigPyIterator___next__(self)

    def previous(self):
        return _pyQisaAs.SwigPyIterator_previous(self)

    def advance(self, n):
        return _pyQisaAs.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _pyQisaAs.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _pyQisaAs.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _pyQisaAs.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _pyQisaAs.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _pyQisaAs.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _pyQisaAs.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _pyQisaAs.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class StringVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StringVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StringVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyQisaAs.StringVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyQisaAs.StringVector___nonzero__(self)

    def __bool__(self):
        return _pyQisaAs.StringVector___bool__(self)

    def __len__(self):
        return _pyQisaAs.StringVector___len__(self)

    def __getslice__(self, i, j):
        return _pyQisaAs.StringVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _pyQisaAs.StringVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _pyQisaAs.StringVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _pyQisaAs.StringVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _pyQisaAs.StringVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _pyQisaAs.StringVector___setitem__(self, *args)

    def pop(self):
        return _pyQisaAs.StringVector_pop(self)

    def append(self, x):
        return _pyQisaAs.StringVector_append(self, x)

    def empty(self):
        return _pyQisaAs.StringVector_empty(self)

    def size(self):
        return _pyQisaAs.StringVector_size(self)

    def swap(self, v):
        return _pyQisaAs.StringVector_swap(self, v)

    def begin(self):
        return _pyQisaAs.StringVector_begin(self)

    def end(self):
        return _pyQisaAs.StringVector_end(self)

    def rbegin(self):
        return _pyQisaAs.StringVector_rbegin(self)

    def rend(self):
        return _pyQisaAs.StringVector_rend(self)

    def clear(self):
        return _pyQisaAs.StringVector_clear(self)

    def get_allocator(self):
        return _pyQisaAs.StringVector_get_allocator(self)

    def pop_back(self):
        return _pyQisaAs.StringVector_pop_back(self)

    def erase(self, *args):
        return _pyQisaAs.StringVector_erase(self, *args)

    def __init__(self, *args):
        this = _pyQisaAs.new_StringVector(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _pyQisaAs.StringVector_push_back(self, x)

    def front(self):
        return _pyQisaAs.StringVector_front(self)

    def back(self):
        return _pyQisaAs.StringVector_back(self)

    def assign(self, n, x):
        return _pyQisaAs.StringVector_assign(self, n, x)

    def resize(self, *args):
        return _pyQisaAs.StringVector_resize(self, *args)

    def insert(self, *args):
        return _pyQisaAs.StringVector_insert(self, *args)

    def reserve(self, n):
        return _pyQisaAs.StringVector_reserve(self, n)

    def capacity(self):
        return _pyQisaAs.StringVector_capacity(self)
    __swig_destroy__ = _pyQisaAs.delete_StringVector
    __del__ = lambda self: None
StringVector_swigregister = _pyQisaAs.StringVector_swigregister
StringVector_swigregister(StringVector)

class qisa_qmap(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, qisa_qmap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, qisa_qmap, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _pyQisaAs.qisa_qmap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _pyQisaAs.qisa_qmap___nonzero__(self)

    def __bool__(self):
        return _pyQisaAs.qisa_qmap___bool__(self)

    def __len__(self):
        return _pyQisaAs.qisa_qmap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _pyQisaAs.qisa_qmap___getitem__(self, key)

    def __delitem__(self, key):
        return _pyQisaAs.qisa_qmap___delitem__(self, key)

    def has_key(self, key):
        return _pyQisaAs.qisa_qmap_has_key(self, key)

    def keys(self):
        return _pyQisaAs.qisa_qmap_keys(self)

    def values(self):
        return _pyQisaAs.qisa_qmap_values(self)

    def items(self):
        return _pyQisaAs.qisa_qmap_items(self)

    def __contains__(self, key):
        return _pyQisaAs.qisa_qmap___contains__(self, key)

    def key_iterator(self):
        return _pyQisaAs.qisa_qmap_key_iterator(self)

    def value_iterator(self):
        return _pyQisaAs.qisa_qmap_value_iterator(self)

    def __setitem__(self, *args):
        return _pyQisaAs.qisa_qmap___setitem__(self, *args)

    def asdict(self):
        return _pyQisaAs.qisa_qmap_asdict(self)

    def __init__(self, *args):
        this = _pyQisaAs.new_qisa_qmap(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def empty(self):
        return _pyQisaAs.qisa_qmap_empty(self)

    def size(self):
        return _pyQisaAs.qisa_qmap_size(self)

    def swap(self, v):
        return _pyQisaAs.qisa_qmap_swap(self, v)

    def begin(self):
        return _pyQisaAs.qisa_qmap_begin(self)

    def end(self):
        return _pyQisaAs.qisa_qmap_end(self)

    def rbegin(self):
        return _pyQisaAs.qisa_qmap_rbegin(self)

    def rend(self):
        return _pyQisaAs.qisa_qmap_rend(self)

    def clear(self):
        return _pyQisaAs.qisa_qmap_clear(self)

    def get_allocator(self):
        return _pyQisaAs.qisa_qmap_get_allocator(self)

    def count(self, x):
        return _pyQisaAs.qisa_qmap_count(self, x)

    def erase(self, *args):
        return _pyQisaAs.qisa_qmap_erase(self, *args)

    def find(self, x):
        return _pyQisaAs.qisa_qmap_find(self, x)

    def lower_bound(self, x):
        return _pyQisaAs.qisa_qmap_lower_bound(self, x)

    def upper_bound(self, x):
        return _pyQisaAs.qisa_qmap_upper_bound(self, x)
    __swig_destroy__ = _pyQisaAs.delete_qisa_qmap
    __del__ = lambda self: None
qisa_qmap_swigregister = _pyQisaAs.qisa_qmap_swigregister
qisa_qmap_swigregister(qisa_qmap)

class QISA_Driver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, QISA_Driver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, QISA_Driver, name)
    __repr__ = _swig_repr

    def __init__(self):
        """Constructor"""
        this = _pyQisaAs.new_QISA_Driver()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pyQisaAs.delete_QISA_Driver
    __del__ = lambda self: None

    def getVersion():
        """

        Return a string that represents the version of the assembler.

        """
        return _pyQisaAs.QISA_Driver_getVersion()

    if _newclass:
        getVersion = staticmethod(getVersion)
    __swig_getmethods__["getVersion"] = lambda x: getVersion

    def enableScannerTracing(self, enabled):
        """

        Enable or disable scanner (flex) tracing.
        This is a debugging aid that can be used during development of this assembler.

        Parameters
        ----------
        enabled  -- True if scanner tracing should be enabled, False if it should be disabled.

        """
        return _pyQisaAs.QISA_Driver_enableScannerTracing(self, enabled)


    def enableParserTracing(self, enabled):
        """

        Enable or disable parser (bison) tracing.
        This is a debugging aid that can be used during development of this assembler.

        Parameters
        ----------
        enabled: bool  -- True if parser tracing should be enabled, False if it should be disabled.

        """
        return _pyQisaAs.QISA_Driver_enableParserTracing(self, enabled)


    def assemble(self, filename):
        """

        Assemble the given file.

        Parameters
        ----------
        filename: str File that contains QISA assembly source code.

        Returns
        -------
        --> bool: True on success, false on failure.

        Note
        ----
        On error, you can use getLastErrorMessage() to get a description of that error.

        """
        return _pyQisaAs.QISA_Driver_assemble(self, filename)


    def disassemble(self, filename):
        """

        Disassemble the given file.

        Parameters
        ----------
        filename: str File that contains QISA instructions in binary form.

        Returns
        -------
        --> bool: True on success, false on failure.

        """
        return _pyQisaAs.QISA_Driver_disassemble(self, filename)


    def getLastErrorMessage(self):
        """

        Returns
        -------
        --> str: The last generated error message.

        """
        return _pyQisaAs.QISA_Driver_getLastErrorMessage(self)


    def setVerbose(self, verbose):
        """

        Change the verbosity of the assembler.
        This determines whether or not informational messages are shown while the assembler decodes its input instructions.

        Parameters
        ----------
        verbose: bool  -- Specifies the verbosity of the assembler.


        """
        return _pyQisaAs.QISA_Driver_setVerbose(self, verbose)


    def getInstructionsAsHexStrings(self, withBinaryOutput):
        """

        Retrieve the generated code as a list of strings that contain the hex values of the encoded instructions.

        Parameters
        ----------
        withBinaryOutput: bool  -- If True, the binary representation of the instruction will be appended to the hex codes.

        Returns
        -------
        --> tuple of str: The generated instructions, one encoded instruction per element.

        """
        return _pyQisaAs.QISA_Driver_getInstructionsAsHexStrings(self, withBinaryOutput)


    def setDisassemblyFormat(self, format_id):
        """

        Set the disassembly format to one of the known format types.

        The known formats:

          1: Instruction hex code in front, decoded instruction as comment, as in:

                 29600002   # label_0: FBR EQ, R22

             This is the default disassembly output format.

          2: Decoded instruction in front, instruction hex code as comment, as in:

                 label_0: FBR EQ, R22   # 0x29600002

        Parameters
        ----------
        format_id: int Sets the output format in which the disassembly must be given.

        Returns
        -------
        --> bool: True on success, false on failure.


        """
        return _pyQisaAs.QISA_Driver_setDisassemblyFormat(self, format_id)


    def getDisassemblyOutput(self):
        """

        Retrieve the disassembly output as a multi-line string.

        Returns
        -------
        --> str: The disassembly output: one (or more, in case of quantum) disassembled instruction per line.

        """
        return _pyQisaAs.QISA_Driver_getDisassemblyOutput(self)


    def save(self, outputFileName):
        """

        Save binary assembled or textual disassembled instructions to the given output file.

        Parameters
        ----------
        outputFileName: str  -- Name of the file in which to store the generated output.

        """
        return _pyQisaAs.QISA_Driver_save(self, outputFileName)


    def dumpInstructionsSpecification(self):
        """

        Retrieve the configured QISA instruction specifications as a multi-line string.

        Returns
        -------
        --> str: The configured QISA opcode specification.

        """
        return _pyQisaAs.QISA_Driver_dumpInstructionsSpecification(self)


    def reset(self):
        """

        Free the resources allocated by QISA_Driver and reset it, such that it can be used for assembly/disassembly again.
        NOTE: A reset() is done implicitly at each call to assemble()/disassemble().

        """
        return _pyQisaAs.QISA_Driver_reset(self)


    def loadQuantumInstructions(self, *args):
        """

        Parse the contents of the given file that contains quantum instruction specifications.
        The quantum instruction definitions are specified using the following format:

           def_q_arg_none['<instruction_name>'] = <opcode>
           This specifies the quantum instructions that do not have an argument.

           def_q_arg_st['<instruction_name>'] = <opcode>
           This specifies the quantum instructions that expect an s-register argument.

           def_q_arg_tt['<instruction_name>'] = <opcode>
           This specifies the quantum instructions that expect a t-register argument.

        Parameters
        ----------
        qMapFilename: str File that specifies quantum instructions.

        Returns
        -------
        --> bool: True on success, false on failure.

        Note
        ----
        On error, you can use getLastErrorMessage() to get a description of that error.


        Load the quantum instructions that have been specified in the given maps into qisa-as.

        Parameters
        ----------
        arg_none_map: qisa_qmap Specifies quantum instructions that do not have an argument.
        arg_st_map:   qisa_qmap Specifies quantum instructions that expect an s-register argument.
        arg_tt_map:   qisa_qmap Specifies quantum instructions that expect a t-register argument.

        Returns
        -------
        --> bool: True if the instructions were accepted, False if they
                  contain errors, such as duplicate opcodes.

        Note
        ----
        On error, you can use getLastErrorMessage() to get a description of that error.

        """
        return _pyQisaAs.QISA_Driver_loadQuantumInstructions(self, *args)

QISA_Driver_swigregister = _pyQisaAs.QISA_Driver_swigregister
QISA_Driver_swigregister(QISA_Driver)

def QISA_Driver_getVersion():
    """

    Return a string that represents the version of the assembler.

    """
    return _pyQisaAs.QISA_Driver_getVersion()

# This file is compatible with both classic and new-style classes.


