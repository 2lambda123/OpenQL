# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


"""
`OpenQL` is a C++/Python framework for high-level quantum programming. The framework provides a compiler for compiling and optimizing quantum code. The compiler produces the intermediate quantum assembly language in cQASM (Common QASM) and the compiled eQASM (executable QASM) for various target platforms. While the eQASM is platform-specific, the quantum assembly code (QASM) is hardware-agnostic and can be simulated on the QX simulator.
"""


from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_openql', [dirname(__file__)])
        except ImportError:
            import _openql
            return _openql
        if fp is not None:
            try:
                _mod = imp.load_module('_openql', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _openql = swig_import_helper()
    del swig_import_helper
else:
    import _openql
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _openql.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _openql.SwigPyIterator_value(self)
    def incr(self, n=1): return _openql.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _openql.SwigPyIterator_decr(self, n)
    def distance(self, *args, **kwargs): return _openql.SwigPyIterator_distance(self, *args, **kwargs)
    def equal(self, *args, **kwargs): return _openql.SwigPyIterator_equal(self, *args, **kwargs)
    def copy(self): return _openql.SwigPyIterator_copy(self)
    def next(self): return _openql.SwigPyIterator_next(self)
    def __next__(self): return _openql.SwigPyIterator___next__(self)
    def previous(self): return _openql.SwigPyIterator_previous(self)
    def advance(self, *args, **kwargs): return _openql.SwigPyIterator_advance(self, *args, **kwargs)
    def __eq__(self, *args, **kwargs): return _openql.SwigPyIterator___eq__(self, *args, **kwargs)
    def __ne__(self, *args, **kwargs): return _openql.SwigPyIterator___ne__(self, *args, **kwargs)
    def __iadd__(self, *args, **kwargs): return _openql.SwigPyIterator___iadd__(self, *args, **kwargs)
    def __isub__(self, *args, **kwargs): return _openql.SwigPyIterator___isub__(self, *args, **kwargs)
    def __add__(self, *args, **kwargs): return _openql.SwigPyIterator___add__(self, *args, **kwargs)
    def __sub__(self, *args): return _openql.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _openql.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectori(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _openql.vectori_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openql.vectori___nonzero__(self)
    def __bool__(self): return _openql.vectori___bool__(self)
    def __len__(self): return _openql.vectori___len__(self)
    def pop(self): return _openql.vectori_pop(self)
    def __getslice__(self, *args, **kwargs): return _openql.vectori___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _openql.vectori___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _openql.vectori___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _openql.vectori___delitem__(self, *args)
    def __getitem__(self, *args): return _openql.vectori___getitem__(self, *args)
    def __setitem__(self, *args): return _openql.vectori___setitem__(self, *args)
    def append(self, *args, **kwargs): return _openql.vectori_append(self, *args, **kwargs)
    def empty(self): return _openql.vectori_empty(self)
    def size(self): return _openql.vectori_size(self)
    def clear(self): return _openql.vectori_clear(self)
    def swap(self, *args, **kwargs): return _openql.vectori_swap(self, *args, **kwargs)
    def get_allocator(self): return _openql.vectori_get_allocator(self)
    def begin(self): return _openql.vectori_begin(self)
    def end(self): return _openql.vectori_end(self)
    def rbegin(self): return _openql.vectori_rbegin(self)
    def rend(self): return _openql.vectori_rend(self)
    def pop_back(self): return _openql.vectori_pop_back(self)
    def erase(self, *args): return _openql.vectori_erase(self, *args)
    def __init__(self, *args): 
        this = _openql.new_vectori(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _openql.vectori_push_back(self, *args, **kwargs)
    def front(self): return _openql.vectori_front(self)
    def back(self): return _openql.vectori_back(self)
    def assign(self, *args, **kwargs): return _openql.vectori_assign(self, *args, **kwargs)
    def resize(self, *args): return _openql.vectori_resize(self, *args)
    def insert(self, *args): return _openql.vectori_insert(self, *args)
    def reserve(self, *args, **kwargs): return _openql.vectori_reserve(self, *args, **kwargs)
    def capacity(self): return _openql.vectori_capacity(self)
    __swig_destroy__ = _openql.delete_vectori
    __del__ = lambda self : None;
vectori_swigregister = _openql.vectori_swigregister
vectori_swigregister(vectori)

class vectorui(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _openql.vectorui_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openql.vectorui___nonzero__(self)
    def __bool__(self): return _openql.vectorui___bool__(self)
    def __len__(self): return _openql.vectorui___len__(self)
    def pop(self): return _openql.vectorui_pop(self)
    def __getslice__(self, *args, **kwargs): return _openql.vectorui___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _openql.vectorui___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _openql.vectorui___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _openql.vectorui___delitem__(self, *args)
    def __getitem__(self, *args): return _openql.vectorui___getitem__(self, *args)
    def __setitem__(self, *args): return _openql.vectorui___setitem__(self, *args)
    def append(self, *args, **kwargs): return _openql.vectorui_append(self, *args, **kwargs)
    def empty(self): return _openql.vectorui_empty(self)
    def size(self): return _openql.vectorui_size(self)
    def clear(self): return _openql.vectorui_clear(self)
    def swap(self, *args, **kwargs): return _openql.vectorui_swap(self, *args, **kwargs)
    def get_allocator(self): return _openql.vectorui_get_allocator(self)
    def begin(self): return _openql.vectorui_begin(self)
    def end(self): return _openql.vectorui_end(self)
    def rbegin(self): return _openql.vectorui_rbegin(self)
    def rend(self): return _openql.vectorui_rend(self)
    def pop_back(self): return _openql.vectorui_pop_back(self)
    def erase(self, *args): return _openql.vectorui_erase(self, *args)
    def __init__(self, *args): 
        this = _openql.new_vectorui(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _openql.vectorui_push_back(self, *args, **kwargs)
    def front(self): return _openql.vectorui_front(self)
    def back(self): return _openql.vectorui_back(self)
    def assign(self, *args, **kwargs): return _openql.vectorui_assign(self, *args, **kwargs)
    def resize(self, *args): return _openql.vectorui_resize(self, *args)
    def insert(self, *args): return _openql.vectorui_insert(self, *args)
    def reserve(self, *args, **kwargs): return _openql.vectorui_reserve(self, *args, **kwargs)
    def capacity(self): return _openql.vectorui_capacity(self)
    __swig_destroy__ = _openql.delete_vectorui
    __del__ = lambda self : None;
vectorui_swigregister = _openql.vectorui_swigregister
vectorui_swigregister(vectorui)

class vectorf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _openql.vectorf_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openql.vectorf___nonzero__(self)
    def __bool__(self): return _openql.vectorf___bool__(self)
    def __len__(self): return _openql.vectorf___len__(self)
    def pop(self): return _openql.vectorf_pop(self)
    def __getslice__(self, *args, **kwargs): return _openql.vectorf___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _openql.vectorf___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _openql.vectorf___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _openql.vectorf___delitem__(self, *args)
    def __getitem__(self, *args): return _openql.vectorf___getitem__(self, *args)
    def __setitem__(self, *args): return _openql.vectorf___setitem__(self, *args)
    def append(self, *args, **kwargs): return _openql.vectorf_append(self, *args, **kwargs)
    def empty(self): return _openql.vectorf_empty(self)
    def size(self): return _openql.vectorf_size(self)
    def clear(self): return _openql.vectorf_clear(self)
    def swap(self, *args, **kwargs): return _openql.vectorf_swap(self, *args, **kwargs)
    def get_allocator(self): return _openql.vectorf_get_allocator(self)
    def begin(self): return _openql.vectorf_begin(self)
    def end(self): return _openql.vectorf_end(self)
    def rbegin(self): return _openql.vectorf_rbegin(self)
    def rend(self): return _openql.vectorf_rend(self)
    def pop_back(self): return _openql.vectorf_pop_back(self)
    def erase(self, *args): return _openql.vectorf_erase(self, *args)
    def __init__(self, *args): 
        this = _openql.new_vectorf(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _openql.vectorf_push_back(self, *args, **kwargs)
    def front(self): return _openql.vectorf_front(self)
    def back(self): return _openql.vectorf_back(self)
    def assign(self, *args, **kwargs): return _openql.vectorf_assign(self, *args, **kwargs)
    def resize(self, *args): return _openql.vectorf_resize(self, *args)
    def insert(self, *args): return _openql.vectorf_insert(self, *args)
    def reserve(self, *args, **kwargs): return _openql.vectorf_reserve(self, *args, **kwargs)
    def capacity(self): return _openql.vectorf_capacity(self)
    __swig_destroy__ = _openql.delete_vectorf
    __del__ = lambda self : None;
vectorf_swigregister = _openql.vectorf_swigregister
vectorf_swigregister(vectorf)

class vectord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self): return _openql.vectord_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _openql.vectord___nonzero__(self)
    def __bool__(self): return _openql.vectord___bool__(self)
    def __len__(self): return _openql.vectord___len__(self)
    def pop(self): return _openql.vectord_pop(self)
    def __getslice__(self, *args, **kwargs): return _openql.vectord___getslice__(self, *args, **kwargs)
    def __setslice__(self, *args, **kwargs): return _openql.vectord___setslice__(self, *args, **kwargs)
    def __delslice__(self, *args, **kwargs): return _openql.vectord___delslice__(self, *args, **kwargs)
    def __delitem__(self, *args): return _openql.vectord___delitem__(self, *args)
    def __getitem__(self, *args): return _openql.vectord___getitem__(self, *args)
    def __setitem__(self, *args): return _openql.vectord___setitem__(self, *args)
    def append(self, *args, **kwargs): return _openql.vectord_append(self, *args, **kwargs)
    def empty(self): return _openql.vectord_empty(self)
    def size(self): return _openql.vectord_size(self)
    def clear(self): return _openql.vectord_clear(self)
    def swap(self, *args, **kwargs): return _openql.vectord_swap(self, *args, **kwargs)
    def get_allocator(self): return _openql.vectord_get_allocator(self)
    def begin(self): return _openql.vectord_begin(self)
    def end(self): return _openql.vectord_end(self)
    def rbegin(self): return _openql.vectord_rbegin(self)
    def rend(self): return _openql.vectord_rend(self)
    def pop_back(self): return _openql.vectord_pop_back(self)
    def erase(self, *args): return _openql.vectord_erase(self, *args)
    def __init__(self, *args): 
        this = _openql.new_vectord(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args, **kwargs): return _openql.vectord_push_back(self, *args, **kwargs)
    def front(self): return _openql.vectord_front(self)
    def back(self): return _openql.vectord_back(self)
    def assign(self, *args, **kwargs): return _openql.vectord_assign(self, *args, **kwargs)
    def resize(self, *args): return _openql.vectord_resize(self, *args)
    def insert(self, *args): return _openql.vectord_insert(self, *args)
    def reserve(self, *args, **kwargs): return _openql.vectord_reserve(self, *args, **kwargs)
    def capacity(self): return _openql.vectord_capacity(self)
    __swig_destroy__ = _openql.delete_vectord
    __del__ = lambda self : None;
vectord_swigregister = _openql.vectord_swigregister
vectord_swigregister(vectord)


def get_version():
  """
    Returns OpenQL version

    arameters
    ---------
    one

    eturns
    ------
    tr
       version number as a string

    """
  return _openql.get_version()

def set_option(*args, **kwargs):
  """
    Sets any of the following OpenQL options:
        Opt. Name   :   Default     : Possible values
       'log_level'  : LOG_NOTHING   : 'LOG_{NOTHING/CRITICAL/ERROR/WARNING/INFO/DEBUG}'
       'output_dir' : 'test_output' : <output directory>
       'scheduler'  : 'ASAP'        : 'ASAP/ALAP'
       'use_default_gates' : 'yes'  : 'yes/no'
       'optimize'   :   'no'        : 'yes/no'
       'decompose_toffoli' :  'no'  : 'yes/no'


    arameters
    ---------
    rg1 : str
       Option name
    rg2 : str
       Option value

    """
  return _openql.set_option(*args, **kwargs)

def get_option(*args, **kwargs):
  """
    Returns value of any of the following OpenQL options:
        Opt. Name   :   Default     : Possible values
       'log_level'  : LOG_NOTHING   : 'LOG_{NOTHING/CRITICAL/ERROR/WARNING/INFO/DEBUG}'
       'output_dir' : 'test_output' : <output directory>
       'scheduler'  : 'ASAP'        : 'ASAP/ALAP'
       'use_default_gates' : 'yes'  : 'yes/no'
       'optimize'   :   'no'        : 'yes/no'
       'decompose_toffoli' :  'no'  : 'yes/no'

    arameters
    ---------
    rg1 : str
       Option name

    eturns
    ------
    tr
       Option value

    """
  return _openql.get_option(*args, **kwargs)

def print_options():
  """
    Prints a list of available OpenQL options with their values.


    """
  return _openql.print_options()
class Platform(object):
    """ Platform class specifiying the target platform to be used for compilation."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_openql.Platform_name_get, _openql.Platform_name_set)
    config_file = _swig_property(_openql.Platform_config_file_get, _openql.Platform_config_file_set)
    platform = _swig_property(_openql.Platform_platform_get, _openql.Platform_platform_set)
    def __init__(self, *args): 
        """
        Constructs a Platform object.

        arameters
        ---------
        rg1 : str
           name of the Platform
        rg2 : str
           name of the configuration file specifying the platform

        """
        this = _openql.new_Platform(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_qubit_number(self):
        """
        returns number of qubits in the platform.

        arameters
        ---------
        one

        eturns
        ------
        nt
           number of qubits

        """
        return _openql.Platform_get_qubit_number(self)

    __swig_destroy__ = _openql.delete_Platform
    __del__ = lambda self : None;
Platform_swigregister = _openql.Platform_swigregister
Platform_swigregister(Platform)

class CReg(object):
    """ Classical register class."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    creg = _swig_property(_openql.CReg_creg_get, _openql.CReg_creg_set)
    def __init__(self): 
        """
        Constructs a classical register which can be source/destination for classical operations.

        arameters
        ---------
        one

        eturns
        ------
        Reg
           classical register object


        """
        this = _openql.new_CReg()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openql.delete_CReg
    __del__ = lambda self : None;
CReg_swigregister = _openql.CReg_swigregister
CReg_swigregister(CReg)

class Operation(object):
    """ Operation class representing classical operations."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    operation = _swig_property(_openql.Operation_operation_get, _openql.Operation_operation_set)
    def __init__(self, *args): 
        """
        Constructs an Operation object (used for initializing with immediate values).

        arameters
        ---------
        rg1 : int
           immediate value

        """
        this = _openql.new_Operation(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _openql.delete_Operation
    __del__ = lambda self : None;
Operation_swigregister = _openql.Operation_swigregister
Operation_swigregister(Operation)

class Kernel(object):
    """ Kernel class which contains various quantum instructions."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_openql.Kernel_name_get, _openql.Kernel_name_set)
    platform = _swig_property(_openql.Kernel_platform_get, _openql.Kernel_platform_set)
    qubit_count = _swig_property(_openql.Kernel_qubit_count_get, _openql.Kernel_qubit_count_set)
    creg_count = _swig_property(_openql.Kernel_creg_count_get, _openql.Kernel_creg_count_set)
    kernel = _swig_property(_openql.Kernel_kernel_get, _openql.Kernel_kernel_set)
    def __init__(self, *args, **kwargs): 
        """
        Constructs a Kernel object.

        arameters
        ---------
        rg1 : str
           name of the Kernel
        rg2 : Platform
           target platform for which the kernel will be compiled
        rg3 : int
           qubit count
        rg4 : int
           classical register count

        """
        this = _openql.new_Kernel(*args, **kwargs)
        try: self.this.append(this)
        except: self.this = this
    def identity(self, *args, **kwargs):
        """
        Applies identity on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_identity(self, *args, **kwargs)

    def hadamard(self, *args, **kwargs):
        """
        Applies hadamard on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_hadamard(self, *args, **kwargs)

    def s(self, *args, **kwargs):
        """
        Applies x on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_s(self, *args, **kwargs)

    def sdag(self, *args, **kwargs):
        """
        Applies sdag on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_sdag(self, *args, **kwargs)

    def t(self, *args, **kwargs): return _openql.Kernel_t(self, *args, **kwargs)
    def tdag(self, *args, **kwargs): return _openql.Kernel_tdag(self, *args, **kwargs)
    def x(self, *args, **kwargs): return _openql.Kernel_x(self, *args, **kwargs)
    def y(self, *args, **kwargs):
        """
        Applies y on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_y(self, *args, **kwargs)

    def z(self, *args, **kwargs):
        """
        Applies z on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_z(self, *args, **kwargs)

    def rx90(self, *args, **kwargs):
        """
        Applies rx90 on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_rx90(self, *args, **kwargs)

    def mrx90(self, *args, **kwargs):
        """
        Applies mrx90 on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_mrx90(self, *args, **kwargs)

    def rx180(self, *args, **kwargs):
        """
        Applies rx180 on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_rx180(self, *args, **kwargs)

    def ry90(self, *args, **kwargs): return _openql.Kernel_ry90(self, *args, **kwargs)
    def mry90(self, *args, **kwargs): return _openql.Kernel_mry90(self, *args, **kwargs)
    def ry180(self, *args, **kwargs):
        """
        Applies ry180 on the qubit specified in argument.

        arameters
        ---------
        rg1 : int
           target qubit

        """
        return _openql.Kernel_ry180(self, *args, **kwargs)

    def rx(self, *args, **kwargs): return _openql.Kernel_rx(self, *args, **kwargs)
    def ry(self, *args, **kwargs): return _openql.Kernel_ry(self, *args, **kwargs)
    def rz(self, *args, **kwargs): return _openql.Kernel_rz(self, *args, **kwargs)
    def measure(self, *args, **kwargs):
        """
        measures input qubit.

        arameters
        ---------
        rg1 : int
           input qubit

        """
        return _openql.Kernel_measure(self, *args, **kwargs)

    def prepz(self, *args, **kwargs): return _openql.Kernel_prepz(self, *args, **kwargs)
    def cnot(self, *args, **kwargs):
        """
        Applies controlled-not operation.

        arameters
        ---------
        rg1 : int
           control qubit
        rg2 : int
           target qubit

        """
        return _openql.Kernel_cnot(self, *args, **kwargs)

    def cphase(self, *args, **kwargs):
        """
        Applies controlled-phase operation.

        arameters
        ---------
        rg1 : int
           control qubit
        rg2 : int
           target qubit

        """
        return _openql.Kernel_cphase(self, *args, **kwargs)

    def cz(self, *args, **kwargs): return _openql.Kernel_cz(self, *args, **kwargs)
    def toffoli(self, *args, **kwargs):
        """
        Applies controlled-controlled-not operation.

        arameters
        ---------
        rg1 : int
           control qubit
        rg2 : int
           control qubit
        rg3 : int
           target qubit

        """
        return _openql.Kernel_toffoli(self, *args, **kwargs)

    def clifford(self, *args, **kwargs):
        """
        Applies clifford operation of the specified id on the qubit.

        arameters
        ---------
        rg1 : int
           clifford operation id
        rg2 : int
           target qubit

        he ids and the corresponding operations are:
         : ['I']
         : ['Y90', 'X90']
         : ['mX90', 'mY90']
         : ['X180']
         : ['mY90', 'mX90']
         : ['X90', 'mY90']
         : ['Y180']
         : ['mY90', 'X90']
         : ['X90', 'Y90']
         : ['X180', 'Y180']
        0: ['Y90', 'mX90']
        1: ['mX90', 'Y90']
        2: ['Y90', 'X180']
        3: ['mX90']
        4: ['X90', 'mY90', 'mX90']
        5: ['mY90']
        6: ['X90']
        7: ['X90', 'Y90', 'X90']
        8: ['mY90', 'X180']
        9: ['X90', 'Y180']
        0: ['X90', 'mY90', 'X90']
        1: ['Y90']
        2: ['mX90', 'Y180']
        3: ['X90', 'Y90', 'mX90']

        """
        return _openql.Kernel_clifford(self, *args, **kwargs)

    def wait(self, *args, **kwargs):
        """
        inserts explicit wait on specified qubits.

        arameters
        ---------
        rg1 : []
           list of qubits
        rg2 : int
           duration in ns

        """
        return _openql.Kernel_wait(self, *args, **kwargs)

    def barrier(self, *args, **kwargs): return _openql.Kernel_barrier(self, *args, **kwargs)
    def get_custom_instructions(self):
        """
        Returns list of available custom instructions.

        arameters
        ---------
        one

        eturns
        ------
        ]
           List of available custom instructions

        """
        return _openql.Kernel_get_custom_instructions(self)

    def display(self):
        """
        inserts QX display instruction (so QX specific).

        arameters
        ---------
        one

        eturns
        ------
        one

        """
        return _openql.Kernel_display(self)

    def gate(self, *args):
        """
        adds custom/default gates to kernel.

        arameters
        ---------
        rg1 : str
           name of gate
        rg2 : []
           list of qubits
        rg3 : CReg
           classical destination register for measure operation.

        """
        return _openql.Kernel_gate(self, *args)

    def classical(self, *args):
        """
        adds classical operation kernel.

        arameters
        ---------
        rg1 : CReg
           destination register for classical operation.
        rg2 : Operation
           classical operation.

        """
        return _openql.Kernel_classical(self, *args)

    def controlled(self, *args, **kwargs):
        """
        generates controlled version of the kernel from the input kernel.

        arameters
        ---------

        rg1 : ql::Kernel
           input kernel. Except measure, Kernel to be controlled may contain any of the default gates as well custom gates which are not specialized for a specific qubits.

        rg2 : []
           list of control qubits.

        rg3 : []
           list of ancilla qubits. Number of ancilla qubits should be equal to number of control qubits.


        eturns
        ------
        one

        """
        return _openql.Kernel_controlled(self, *args, **kwargs)

    def conjugate(self, *args, **kwargs):
        """
        generates conjugate version of the kernel from the input kernel.

        arameters
        ---------

        rg1 : ql::Kernel
           input kernel. Except measure, Kernel to be conjugated.


        eturns
        ------
        one

        """
        return _openql.Kernel_conjugate(self, *args, **kwargs)

    __swig_destroy__ = _openql.delete_Kernel
    __del__ = lambda self : None;
Kernel_swigregister = _openql.Kernel_swigregister
Kernel_swigregister(Kernel)

class Program(object):
    """ Program class which contains one or more kernels."""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    name = _swig_property(_openql.Program_name_get, _openql.Program_name_set)
    platform = _swig_property(_openql.Program_platform_get, _openql.Program_platform_set)
    qubit_count = _swig_property(_openql.Program_qubit_count_get, _openql.Program_qubit_count_set)
    creg_count = _swig_property(_openql.Program_creg_count_get, _openql.Program_creg_count_set)
    program = _swig_property(_openql.Program_program_get, _openql.Program_program_set)
    def __init__(self, *args): 
        """
        Constructs a program object.

        arameters
        ---------
        rg1 : str
           name of the program
        rg2 : Platform
           instance of an OpenQL Platform
        rg3 : int
           number of qubits the program will use
        rg4 : int
           number of classical registers the program will use (default: 0)

        """
        this = _openql.new_Program(*args)
        try: self.this.append(this)
        except: self.this = this
    def set_sweep_points(self, *args):
        """
        Sets sweep points for an experiment.

        arameters
        ---------
        rg1 : []
           list of sweep points

        """
        return _openql.Program_set_sweep_points(self, *args)

    def get_sweep_points(self):
        """
        Returns sweep points for an experiment.

        arameters
        ---------
        one

        eturns
        ------
        ]
           list of sweep points 
        """
        return _openql.Program_get_sweep_points(self)

    def add_kernel(self, *args, **kwargs):
        """
        Adds specified kernel to program.

        arameters
        ---------
        rg1 : kernel
           kernel to be added

        """
        return _openql.Program_add_kernel(self, *args, **kwargs)

    def add_program(self, *args, **kwargs): return _openql.Program_add_program(self, *args, **kwargs)
    def add_if(self, *args):
        """
        Adds specified sub-program to a program which will be executed if specified condition is true. This allows nesting of operations.

        arameters
        ---------
        rg1 : Program
           program to be executed
        rg2: Operation
           classical relational operation (<, >, <=, >=, ==, !=)

        """
        return _openql.Program_add_if(self, *args)

    def add_if_else(self, *args):
        """
        Adds specified sub-programs to a program. First sub-program will be executed if specified condition is true. Second sub-program will be executed if specified condition is false.

        arameters
        ---------
        rg1 : Program
           program to be executed when specified condition is true (if part).
        rg2 : Program
           program to be executed when specified condition is false (else part).
        rg3: Operation
           classical relational operation (<, >, <=, >=, ==, !=)

        """
        return _openql.Program_add_if_else(self, *args)

    def add_do_while(self, *args):
        """
        Adds specified sub-program to a program which will be repeatedly executed while specified condition is true.

        arameters
        ---------
        rg1 : Program
           program to be executed repeatedly
        rg2: Operation
           classical relational operation (<, >, <=, >=, ==, !=)

        """
        return _openql.Program_add_do_while(self, *args)

    def add_for(self, *args):
        """
        Adds specified sub-program to a program which will be executed for specified iterations.

        arameters
        ---------
        rg1 : Program
           sub-program to be executed repeatedly
        rg2: int
           iteration count

        """
        return _openql.Program_add_for(self, *args)

    def compile(self):
        """
        Compiles the program.

        arameters
        ---------
        one

        """
        return _openql.Program_compile(self)

    def qasm(self):
        """
        Returns program QASM
        arameters
        ---------
        one

        eturns
        ------
        tr
           qasm 
        """
        return _openql.Program_qasm(self)

    def microcode(self):
        """
        Returns program microcode
        arameters
        ---------
        one

        eturns
        ------
        tr
           microcode 
        """
        return _openql.Program_microcode(self)

    def print_interaction_matrix(self): return _openql.Program_print_interaction_matrix(self)
    def write_interaction_matrix(self): return _openql.Program_write_interaction_matrix(self)
    __swig_destroy__ = _openql.delete_Program
    __del__ = lambda self : None;
Program_swigregister = _openql.Program_swigregister
Program_swigregister(Program)



