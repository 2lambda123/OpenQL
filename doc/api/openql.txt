OpenQL
    openql - `OpenQL` is a C++/Python framework for high-level quantum programming. The framework provide a compiler for compiling and optimizing quantum code. The compiler produce the intermediate quantum assembly language and the compiled micro-code for various target platforms. While the microcode is platform-specific, the quantum assembly code (qasm) is hardware-agnostic and can be simulated on the QX simulator.

CLASSES
    builtins.object
        Kernel
        Platform
        Program
        QASM_Loader

    class Kernel(builtins.object)
     |  Kernel class which contains various quantum instructions.
     |
     |  Methods defined here:
     |
     |  __del__ lambda self
     |
     |  __init__(self, kname, p)
     |       Constructs a Kernel object.
     |
     |      Parameters
     |      ----------
     |      arg1 : str
     |          name of the Kernel
     |      arg2 : Platform
     |          target platform for which the kernel will be compiled
     |
     |  __repr__ = _swig_repr(self)
     |
     |  __swig_destroy__ = delete_Kernel(...)
     |
     |  barrier(self, qubits)
     |
     |  clifford(self, id, q0)
     |       Applies clifford operation of the specified id on the qubit.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          clifford operation id
     |      arg2 : int
     |          target qubit
     |
     |      The ids and the corresponding operations are:
     |      0 : ['I']
     |      1 : ['Y90', 'X90']
     |      2 : ['mX90', 'mY90']
     |      3 : ['X180']
     |      4 : ['mY90', 'mX90']
     |      5 : ['X90', 'mY90']
     |      6 : ['Y180']
     |      7 : ['mY90', 'X90']
     |      8 : ['X90', 'Y90']
     |      9 : ['X180', 'Y180']
     |      10: ['Y90', 'mX90']
     |      11: ['mX90', 'Y90']
     |      12: ['Y90', 'X180']
     |      13: ['mX90']
     |      14: ['X90', 'mY90', 'mX90']
     |      15: ['mY90']
     |      16: ['X90']
     |      17: ['X90', 'Y90', 'X90']
     |      18: ['mY90', 'X180']
     |      19: ['X90', 'Y180']
     |      20: ['X90', 'mY90', 'X90']
     |      21: ['Y90']
     |      22: ['mX90', 'Y180']
     |      23: ['X90', 'Y90', 'mX90']
     |
     |  cnot(self, q0, q1)
     |       Applies controlled-not operation.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          control qubit
     |      arg2 : int
     |          target qubit
     |
     |  cphase(self, q0, q1)
     |       Applies controlled-phase operation.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          control qubit
     |      arg2 : int
     |          target qubit
     |
     |  cz(self, q0, q1)
     |
     |  display(self)
     |       inserts QX display instruction (so QX specific).
     |
     |      Parameters
     |      ----------
     |      None
     |
     |      Returns
     |      -------
     |      None
     |
     |  gate(self, *args)
     |       adds custom/default gates to kernel.
     |
     |      Parameters
     |      ----------
     |      arg1 : str
     |          name of gate
     |      arg2 : []
     |          list of qubits
     |      arg3 : int
     |          duration in ns (at the moment it is only supported for wait instruction, in the future it will be extended to override duration of other gates as well)
     |
     |  get_custom_instructions(self)
     |       Returns list of available custom instructions.
     |
     |      Parameters
     |      ----------
     |      None
     |
     |      Returns
     |      -------
     |      []
     |          List of available custom instructions
     |
     |  hadamard(self, q0)
     |       Applies hadamard on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  identity(self, q0)
     |       Applies identity on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  measure(self, q0)
     |       measures input qubit.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          input qubit
     |
     |  mrx90(self, q0)
     |       Applies mrx90 on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  mry90(self, q0)
     |
     |  prepz(self, q0)
     |
     |  rx(self, q0, angle)
     |
     |  rx180(self, q0)
     |       Applies rx180 on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  rx90(self, q0)
     |       Applies rx90 on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  ry(self, q0, angle)
     |
     |  ry180(self, q0)
     |       Applies ry180 on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  ry90(self, q0)
     |
     |  rz(self, q0, angle)
     |
     |  s(self, q0)
     |       Applies x on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  sdag(self, q0)
     |       Applies sdag on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  t(self, q0)
     |
     |  tdag(self, q0)
     |
     |  toffoli(self, q0, q1, q2)
     |       Applies controlled-controlled-not operation.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          control qubit
     |      arg2 : int
     |          control qubit
     |      arg3 : int
     |          target qubit
     |
     |  wait(self, qubits, duration)
     |       inserts explicit wait on specified qubits.
     |
     |      Parameters
     |      ----------
     |      arg1 : []
     |          list of qubits
     |      arg2 : int
     |          duration in ns
     |
     |  x(self, q0)
     |
     |  y(self, q0)
     |       Applies y on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  z(self, q0)
     |       Applies z on the qubit specified in argument.
     |
     |      Parameters
     |      ----------
     |      arg1 : int
     |          target qubit
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  name
     |
     |  ql_kernel
     |
     |  thisown
     |      The membership flag

    class Platform(builtins.object)
     |  Platform class specifiying the target platform to be used for compilation.
     |
     |  Methods defined here:
     |
     |  __del__ lambda self
     |
     |  __init__(self, name, config_file)
     |       Constructs a Platform object.
     |
     |      Parameters
     |      ----------
     |      arg1 : str
     |          name of the Platform
     |      arg2 : str
     |          name of the configuration file specifying the platform
     |
     |  __repr__ = _swig_repr(self)
     |
     |  __swig_destroy__ = delete_Platform(...)
     |
     |  get_qubit_number(self)
     |       returns number of qubits in the platform.
     |
     |      Parameters
     |      ----------
     |      None
     |
     |      Returns
     |      -------
     |      int
     |          number of qubits
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  config_file
     |
     |  p_name
     |
     |  ql_platform
     |
     |  thisown
     |      The membership flag

    class Program(builtins.object)
     |  Program class which contains one or more kernels.
     |
     |  Methods defined here:
     |
     |  __del__ lambda self
     |
     |  __init__(self, pname, nqubits, p)
     |       Constructs a program object.
     |
     |      Parameters
     |      ----------
     |      pname : str
     |          name of the program
     |      nqubits : int
     |          number of qubits the program will use
     |      p       : Platform
     |          instance of an OpenQL Platform
     |
     |  __repr__ = _swig_repr(self)
     |
     |  __swig_destroy__ = delete_Program(...)
     |
     |  add_kernel(self, k)
     |       Adds specified kernel to program.
     |
     |      Parameters
     |      ----------
     |      arg1 : kernel
     |          kernel to be added
     |
     |  compile(self, *args, **kwargs)
     |       Compiles the program.
     |
     |      Parameters
     |      ----------
     |      arg1 : bool
     |          optimize, default is False
     |      arg2 : str
     |          scheduler which can be 'ASAP' or 'ALAP', default is 'ALAP'
     |      arg3 : str
     |          verbosity level which in ascending order of verbosity can be
     |              LOG_NOTHING,
     |              LOG_CRITICAL,
     |              LOG_ERROR,
     |              LOG_WARNING,
     |              LOG_INFO,
     |              LOG_DEBUG
     |
     |  microcode(self)
     |       Returns program microcode
     |      Parameters
     |      ----------
     |      None
     |
     |      Returns
     |      -------
     |      str
     |          microcode
     |
     |  print_interaction_matrix(self)
     |
     |  qasm(self)
     |       Returns program QASM
     |      Parameters
     |      ----------
     |      None
     |
     |      Returns
     |      -------
     |      str
     |          qasm
     |
     |  set_sweep_points(self, sweep_points, num_sweep_points)
     |       Sets sweep points for an experiment.
     |
     |      Parameters
     |      ----------
     |      arg1 : []
     |          list of sweep points
     |      arg1 : int
     |              number of sweep points
     |
     |  write_interaction_matrix(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  name
     |
     |  thisown
     |      The membership flag

    class QASM_Loader(builtins.object)
     |  Methods defined here:
     |
     |  __del__ lambda self
     |
     |  __init__(self, file_name)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  __repr__ = _swig_repr(self)
     |
     |  __swig_destroy__ = delete_QASM_Loader(...)
     |
     |  load(self)
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  __dict__
     |      dictionary for instance variables (if defined)
     |
     |  __weakref__
     |      list of weak references to the object (if defined)
     |
     |  file_name
     |
     |  loader
     |
     |  thisown
     |      The membership flag


FUNCTIONS
    get_output_dir()
         Returns the path of current set directory for output files.

        Parameters
        ----------
        None

        Returns
        -------
        str
            Path of output directory

    set_log_level(*args, **kwargs)
         Sets the log level globally

        Parameters
        ----------
        arg1 : str
            verbosity level which in ascending order of verbosity can be
                LOG_NOTHING,
                LOG_CRITICAL,
                LOG_ERROR,
                LOG_WARNING,
                LOG_INFO,
                LOG_DEBUG

    set_output_dir(path)

