/** \file
 * Defines the cQASM writer pass.
 */

#include "ql/pass/io/cqasm/report.h"

#include "ql/utils/filesystem.h"

namespace ql {
namespace pass {
namespace io {
namespace cqasm {
namespace report {

/**
 * Dumps docs for the cQASM writer.
 */
void ReportCQasmPass::dump_docs(
    std::ostream &os,
    const utils::Str &line_prefix
) const {
    os << line_prefix << "This pass writes the current program out as a cQASM file." << std::endl;
}

/**
 * Constructs a cQASM writer.
 */
ReportCQasmPass::ReportCQasmPass(
    const utils::Ptr<const pmgr::PassFactory> &pass_factory,
    const utils::Str &instance_name,
    const utils::Str &type_name
) : pmgr::pass_types::ProgramAnalysis(pass_factory, instance_name, type_name) {
    options.add_str(
        "output_suffix",
        "Suffix to use for the output filename.",
        ".cq"
    );
}

/**
 * Runs the cQASM writer.
 */
utils::Int ReportCQasmPass::run(
    const ir::ProgramRef &program,
    const pmgr::pass_types::Context &context
) const {
    utils::OutFile file{context.output_prefix + options["output_suffix"].as_str()};

    file << "version 1.0\n";
    file << "# This file has been automatically generated by the OpenQL compiler. Please do not modify it manually.\n";
    file << "qubits " << program->qubit_count << "\n";

    // FIXME: this is all kinds of broken. get_prologue()/get_epilogue() don't
    //  return cQASM code (after all, how could they; cQASM doesn't support
    //  control-flow), there's the wait vs skip problem, the qasm output for the
    //  gates is inconsistent (because the IR is inconsistent about gate types)
    //  etc.
    for (auto &kernel : program->kernels) {
        if (kernel->cycles_valid) {
            file << kernel->get_prologue();
            ir::Bundles bundles = ir::bundler(kernel->c, program->platform->cycle_time);
            file << ir::qasm(bundles);
            file << kernel->get_epilogue();
        } else {
            file << kernel->qasm();
        }
    }

    return 0;
}

} // namespace report
} // namespace cqasm
} // namespace io
} // namespace pass
} // namespace ql
